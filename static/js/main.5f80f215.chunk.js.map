{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","useState","Array","fill","history","setHistory","isXnext","setIsXnext","stepNo","setStepNo","status","history_","slice","curr","winner","moves","map","step","move","desc","jumpTo","winnereEl","squares_","window","alert","concat","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f80f215.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\n\n\nfunction Square(props) {\n\n    // const [value, setValue] = useState(null);\n    const classString = 'square';\n\n    return (\n        <button className={classString} onClick={props.onClick}>\n            {props.value} {/* one that came from Board */}\n\n        </button>\n    );\n}\n\n//-------------------- BOARD\n\n\nconst Board = (props) => {\n\n    // const [squares, setSquares] = useState([Array(9).fill(null)]);\n    // const [isXnext, setIsXnext] = useState(true);\n    // --states lifted up to Game\n\n    const renderSquare = (i) => {\n        return <Square\n            value={props.squares[i]}\n            // onClick={() => handleClick(i)}\n            onClick={() => props.onClick(i)}\n        />;\n    }\n\n    function renderSquare2(i) {\n        return <Square />\n    }\n\n    // ---lifted up\n    // const winner = calculateWinner(props.squares);\n    // // const status = 'Next Turn of Player : ' + (isXnext ? 'X' : 'O');\n    // let status;\n    // if (winner) {\n    //   status = \"WINNER is : \" + winner;\n    // }\n    // else {\n    //   status = 'Next Turn of Player : ' + (props.isXnext ? 'X' : 'O');\n    // }\n\n    return (\n\n        <div>\n            {/* <div className=\"container\"> */}\n            {/* <div className=\"status\"> {status} </div> */}\n\n            <div className='boardRow'>\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className='boardRow'>\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className='boardRow'>\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n\n    );\n}\n\n//-------------------- GAME\n\nconst Game = () => {\n    // console.log(this);\n\n\n    const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\n    // array of objects, with key 'squares'\n    const [isXnext, setIsXnext] = useState(true);\n    const [stepNo, setStepNo] = useState(0);\n\n    function handleClick(i) {\n        const history_ = history.slice(0, stepNo + 1);\n        const curr = history_[history_.length - 1];\n        const squares_ = curr.squares.slice();\n        // could have used squares instead of squares_ name\n\n        if (squares_[i]) {\n            // if (calculateWinner(squares_)) { window.prompt(\"Hmm\"); }\n            return;\n        }\n        let winnereEl;\n        if (winnereEl = calculateWinner(squares_)) {\n            // if (calculateWinner(squares_)) { \n            window.alert(\"WINNER IS : \" + winnereEl + '\\nTo continue press: \"Reset\" or \"Go to\"');\n            return;\n        }\n        squares_[i] = isXnext ? 'X' : 'O';\n\n        setHistory(history_.concat({ squares: squares_ }));\n        setIsXnext(!isXnext);\n        setStepNo(history_.length); //not history\n\n        // setSquares({ squares: squares_ });\n    }\n\n    function jumpTo(step) {\n        setStepNo(step);\n        setIsXnext((step % 2) === 0);\n    }\n\n    function winnerAlert(msg) {\n        window.alert(msg);\n    }\n\n    const history_ = history.slice();\n    const curr = history_[stepNo];\n    const winner = calculateWinner(curr.squares);\n    // if (winner) winnerAlert(\"hmm\");\n    const moves = history_.map((step, move) => {\n        const desc = move ? 'Go to Move # ' + move : 'RESET GAME';\n        return (\n            <li key={move}>\n                <button onClick={() => jumpTo(move)}> {desc} </button>\n            </li>\n        );\n    });\n\n    let status;\n    if (winner) {\n        status = \"WINNER is : \" + winner;\n        // winnerAlert(status);\n    }\n    else {\n        status = 'Next Turn of Player : ' + (isXnext ? 'X' : 'O');\n    }\n\n\n    return (\n\n        <div className=\"game\">\n            <div className=\"board\">\n                <Board\n                    squares={curr.squares}\n                    onClick={(i) => handleClick(i)}\n                />\n            </div>\n            <div className=\"gameInfo\">\n                <div>{status}</div>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n\n        /*\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <p>\n                Edit <code>src/App.js</code> and save to reload.\n              </p>\n              <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Learn React\n              </a>\n            </header>\n          </div>\n          */\n\n\n\n    );\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}